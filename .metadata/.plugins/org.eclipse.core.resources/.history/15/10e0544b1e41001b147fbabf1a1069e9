package com.ibm.receiveOrder.service;

import java.util.Base64;
import java.util.Date;
import java.util.Map;
import java.util.function.Function;

import org.apache.commons.lang.StringUtils;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;

import com.ibm.receiveOrder.dto.ReceiveOrderDto;
import com.ibm.receiveOrder.entity.ReceiveOrderEntity;
import com.ibm.receiveOrder.repository.ReceiveOrderRepository;
import com.ibm.receiveOrder.restclient.AccountLoginClient;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;

@Service
public class ReceiveOrderService {

	@Autowired
	ReceiveOrderRepository receiveOrderRepository;
	@Autowired
	AccountLoginClient accountLoginClient;

	@HystrixCommand(fallbackMethod = "receiveOrderServiceFallback")
	public String saveOrderList(ReceiveOrderDto receiveOrderDto, String token) {
		String msg = "";
		if (token != null && !token.isEmpty()) {
			// Jwts.parser().require("username",
			// receiveOrderDto.getUsername()).parse(token);
			// split into 3 parts with . delimiter
			String[] jwtSplit = token.split("\\.");
			JSONObject payload = new JSONObject(decode(jwtSplit[1]));
			String secret = accountLoginClient.validateUser(payload.getString("username"));
			String username=getUserNameFromClaim(token, secret);
			if (StringUtils.isNotEmpty(secret)) {
				if (StringUtils.isNotEmpty(username)) {
					if (!ObjectUtils.isEmpty(getExpirationDateFromClaim(token, secret))
							&& getExpirationDateFromClaim(token, secret).before(new Date())) {
						for (Map.Entry<String, Long> e : receiveOrderDto.getOrderList().entrySet()) {
							ReceiveOrderEntity receiveOrderEntity = new ReceiveOrderEntity();
							receiveOrderEntity.setItem(e.getKey());
							receiveOrderEntity.setQuantity(e.getValue());
							receiveOrderEntity.setUsername(username);
							receiveOrderRepository.save(receiveOrderEntity);
						}
						msg = "Order received succesfully";
					} else {
						msg = "Token Expired";
					}
				} else {
					msg = "Invalid Token";
				}
			} else {
				msg = "Invalid Token";
			}			
		} else {
			msg = "Invalid Token";
		}

		return msg;

	}

	public String decode(String encodedString) {
		return new String(Base64.getUrlDecoder().decode(encodedString));
	}

	public String receiveOrderServiceFallback(ReceiveOrderDto receiveOrderDto, String token) {
		return "Facing technical issue, Please try again later";

	}

	public <T> T extractClaimDetails(String token, Function<Claims, T> claim, String Secret) {
		final Claims claims = parserClaim(token, Secret);
		return claim.apply(claims);
	}

	private Claims parserClaim(String token, String secret) {
		return Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();
	}

	public String getUserNameFromClaim(String token, String secret) {
		return extractClaimDetails(token, Claims::getSubject, secret);
	}

	public Date getExpirationDateFromClaim(String token, String secret) {
		return extractClaimDetails(token, Claims::getExpiration, secret);
	}

}
