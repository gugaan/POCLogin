package com.ibm.accountlogin.service;

import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ibm.accountlogin.dto.UserDto;
import com.ibm.accountlogin.entity.UserEntity;
import com.ibm.accountlogin.mapper.AccountLoginMapper;
import com.ibm.accountlogin.repository.AccountLoginRepository;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

@Service
public class AccountLoginService {
	
	@Autowired
	AccountLoginRepository accountLoginRepository;

	public String createToken(String username) {
		UserEntity userEntity=accountLoginRepository.findByUsername(username);
		String token="";
		if(userEntity != null && !userEntity.getUsername().isEmpty()) {
		String signKey = Base64.getEncoder().encodeToString(userEntity.getPassword().getBytes());
		Map<String,Object> claims= new HashMap<>();
		token = Jwts.builder()
				.setClaims(claims)
				.setSubject(userEntity.getUsername())
				.setIssuer("JWT_KEY")
				.setIssuedAt(new Date(System.currentTimeMillis()))
				.setExpiration(new Date(System.currentTimeMillis() + 600000))
				.signWith(SignatureAlgorithm.HS256, signKey)
				.compact();
		}
		return token;

	}
	
	
	
	public String saveUserDetails(UserDto userDto) {
		AccountLoginMapper mapper =new AccountLoginMapper();
		String signKey = Base64.getEncoder().encodeToString(userDto.getPassword().getBytes());
		userDto.setPassword(signKey);
		UserEntity userEntity=mapper.convertToEntity(userDto);
		accountLoginRepository.save(userEntity);
		return "Saved Successfully";
		
	}
	public String validateUser(String username) {
		UserEntity userEntity=accountLoginRepository.findByUsername(username);
		String secret="";
		if(userEntity != null && !userEntity.getUsername().isEmpty()) {
			secret=userEntity.getPassword();
		}
		return secret;
		
	}

}
